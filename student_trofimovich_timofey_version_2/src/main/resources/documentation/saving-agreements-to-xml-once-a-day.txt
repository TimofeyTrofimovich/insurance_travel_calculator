В разработку поступило новое требование от бизнеса.

Для интеграции с внешней системой необходимо регулярно
выгружать данные по полисам в файлы. Данные по каждому полису
должны быть выгружены в отдельные файлы. Формат файлов: xml.
Данные должны содержать все поля полиса, персон и рисков, а так же
рассчитанные премии.

Данные в файлы необходимо выгружать на регулярной основе,
один раз в сутки.



1)  Как запускать задачу с интервалом времени?

Для реализации сохранения каждые сутки будем использовать механизм планирования в Spring
(аннотация @Scheduled)

Для этого я создал пакет scheduled.

В этом пакете создал класс SchedulerConfig со следующей конфигурацией:

@Configuration
@EnableScheduling - включает механизм планирования

Когда аннотация @EnableScheduling обрабатывается,
Spring сканирует пакеты приложений, чтобы найти все Spring Beans,
декорированные методами @Scheduled, и устанавливает график их выполнения.

В этом же пакете создаем класс AgreementXmlTransformer,
 в котором реализуем метод для сохранения agreements из бд в xml.

    @Scheduled(fixedRateString = "P1D")
        public void writeXml() {}

 интервал указан в формате ISO8601

 Подробнее можно прочитать в этой статье: https://habr.com/ru/articles/580062/

 2) Собрать все необходимые данные для каждого полиса из бд


 Я понял, что информация, которую нужно сохранять в xml-файл аналогична информации, которую я получаю через
 TravelGetAgreementController по uuid полиса.

  Соотвественно, я решил использовать TravelGetAgreementService
 чтобы извлечь из бд всю необходимую информацию.

 Также я использую AgreementEntityRepository, чтобы извлечь все uuid полисов и "скормить" их сервису.

  List<AgreementEntity> agreementEntities = repository.findAll();
          List<AgreementDTO> agreementsList = agreementEntities.stream()
                  .limit(10)
                  .map(agr -> {
                      TravelGetAgreementCoreResult coreResult = service.getAgreement(
                              new TravelGetAgreementCoreCommand(String.valueOf(agr.getUuid())));
                      return coreResult.getAgreement();

                  })
                  .toList();


3)

Для преобразования entities в xml воспользуемся инструментом JAXB.

 https://habr.com/ru/companies/simbirsoft/articles/704818/
 https://examples.javacodegeeks.com/java-development/core-java/xml/bind/jaxb-marshal-example/


 JAXBContext jaxbContext = JAXBContext.newInstance( Agreements.class );
         Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
         jaxbMarshaller.setProperty( Marshaller.JAXB_FORMATTED_OUTPUT, true );
         Agreements agreements = new Agreements();
         agreements.setAgreements(agreementsList);
         jaxbMarshaller.marshal( agreements, new FileWriter("path_to_file"));

 Что за класс Agreements?
 Дело в том, что jaxb может работать только с классом, он не может работать
 напрямую с List, а ведь мы хотим записать именно список полисов.

 Соответсвенно создаем класс Agreements, как обертку над списком полисов.



 @XmlRootElement(name = "agreements")
 @XmlAccessorType(XmlAccessType.FIELD)
 public class Agreements {


     @Getter
     @Setter
     @XmlElement(name = "agreement")
     private List<AgreementDTO> agreements = new ArrayList<>();

     public void add(AgreementDTO agreement) {
         agreements.add(agreement);
     }

 }

  @XmlRootElement(name = "agreements") и  @XmlElement(name = "agreement")
  --- аннотации для работы с JAXB, про них можно прочитать в статьях, ссылки на которые лежат выше ---

именно эти аннотации и определяют структуру xml-документа

 @XmlAccessorType(XmlAccessType.FIELD) - без этой аннотации скорее всего вылезут ошибки
 в тонкости настройки лезть не будем

JAXB сам пройдется по списку полисов и попробует записать каждый AgreementDto

соотвественно для полей AgreementDto также нужно записать соответсвующие аннотации


@XmlAccessorType(XmlAccessType.FIELD)
public class AgreementDTO {

    @XmlElement(name = "dateFrom")
    private Date agreementDateFrom;

    @XmlElement(name = "dateTo")
    private Date agreementDateTo;

    @XmlElement(name = "country")
    private String country;

    @XmlElementWrapper(name="risks")
    @XmlElement(name = "risk")
    private List<String> selectedRisks;

    @XmlElementWrapper(name = "persons")
    @XmlElement(name = "person")
    private List<PersonDTO> persons;

    @XmlElement(name = "premium")
    private BigDecimal agreementPremium;

    @XmlElement(name = "uuid")
    private String uuid;
}


 мы видим, что в свою очередь AgreementDto содержит список PersonDto,
 так что к полям класса PersonDto также пишем аннотации


 @Getter
 @Setter
 @NoArgsConstructor
 @AllArgsConstructor
 @Builder
 @XmlAccessorType(XmlAccessType.FIELD)
 public class PersonDTO {

     @XmlElement(name = "person_code")
     private String personUUID;

     @XmlElement(name = "firstName")
     private String personFirstName;

     @XmlElement(name = "lastName")
     private String personLastName;

     @XmlElement(name = "birthDate")
     private Date personBirthDate;

     @XmlElementWrapper(name = "risks")
     @XmlElement(name = "risk")
     private List<RiskDTO> selectedRisks;

     @XmlElement(name = "medicalRiskLimitLevel")
     private String medicalRiskLimitLevel;

     @XmlElement(name = "travelCost")
     private BigDecimal travelCost;
 }

а у каждой персоны есть список рисков

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@XmlAccessorType(XmlAccessType.FIELD)
public class RiskDTO {

    @XmlElement(name = "ic")
    private String riskIc;

    @XmlElement(name = "premium")
    private BigDecimal premium;
}


получаем красивый xml файл в стиле:

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<agreements>
    <agreement>
        <dateFrom>2025-05-25T03:00:00+03:00</dateFrom>
        <dateTo>2025-05-29T03:00:00+03:00</dateTo>
        <country>SPAIN</country>
        <persons>
            <person>
                <person_code>1212</person_code>
                <firstName>Vasja</firstName>
                <lastName>Pupkin</lastName>
                <birthDate>2000-05-29T03:00:00+03:00</birthDate>
                <risks>
                    <risk>
                        <ic>TRAVEL_CANCELLATION</ic>
                        <premium>38.00</premium>
                    </risk>
                    <risk>
                        <ic>TRAVEL_MEDICAL</ic>
                        <premium>11.00</premium>
                    </risk>
                </risks>
                <medicalRiskLimitLevel>LEVEL_10000</medicalRiskLimitLevel>
                <travelCost>100.00</travelCost>
            </person>
            <person>
                <person_code>1212</person_code>
                <firstName>Petja</firstName>
                <lastName>Pupkin</lastName>
                <birthDate>1950-03-01T03:00:00+03:00</birthDate>
                <risks>
                    <risk>
                        <ic>TRAVEL_CANCELLATION</ic>
                        <premium>68.00</premium>
                    </risk>
                    <risk>
                        <ic>TRAVEL_MEDICAL</ic>
                        <premium>18.00</premium>
                    </risk>
                </risks>
                <medicalRiskLimitLevel>LEVEL_15000</medicalRiskLimitLevel>
                <travelCost>200.00</travelCost>
            </person>
        </persons>
        <premium>135.00</premium>
        <uuid>777ebd23-c8cd-4396-8ed7-ef3ca9c4fd83</uuid>
    </agreement>
    <agreement>
        <dateFrom>2024-01-31T00:00:00+03:00</dateFrom>
        <dateTo>2024-02-10T00:00:00+03:00</dateTo>
        <country>SPAIN</country>
        <persons>
            <person>
                <person_code>2</person_code>
                <firstName>Timofey</firstName>
                <lastName>Трофимович</lastName>
                <birthDate>2024-01-01T00:00:00+03:00</birthDate>
                <risks>
                    <risk>
                        <ic>TRAVEL_MEDICAL</ic>
                        <premium>27.50</premium>
                    </risk>
                </risks>
                <medicalRiskLimitLevel>LEVEL_10000</medicalRiskLimitLevel>
            </person>
        </persons>
        <premium>27.50</premium>
        <uuid>eba7d63e-5384-4c39-b24b-99f9f875125c</uuid>
    </agreement>
    ...
    </agreements>

что можно улучшить?

1) сейчас наш файл просто перезаписывается каждый раз
   можно реализовать логику, в которой файл не будет полностью перезаписываться,
   а только вносить необходимые изменения

2) если данных очень много, может быть неудобно хранить их в одном файле

3) с помощью адаптера можно сделать формат даты более читаемым